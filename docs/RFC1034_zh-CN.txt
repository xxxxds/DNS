网络工作组                                        P. Mockapetris
征求意见稿：1034                                             ISI
废弃：RFC 882, 883, 973                                   1987年11月


                 域名 - 概念与设施



1. 本备忘录的状态

本RFC是域名系统（DNS）的介绍，并省略了许多可以在配套RFC"域名 - 实现与规范"[RFC-1035]中找到的细节。该RFC假定读者熟悉本备忘录中讨论的概念。

DNS功能和数据类型的一个子集构成了官方协议。官方协议包括标准查询及其响应，以及大多数互联网类别的数据格式（例如，主机地址）。

然而，域名系统被有意设计为可扩展的。研究人员不断地提出、实施和试验新的数据类型、查询类型、类别、功能等。因此，虽然官方协议的组成部分预计将基本保持不变并作为生产服务运行，但在官方协议之外的扩展中应始终预料到实验性行为。实验性或过时的功能在这些RFC中有明确标记，使用此类信息时应谨慎。

特别提醒读者，不要依赖示例中出现的值作为当前或完整的值，因为它们的目的主要是为了教学。本备忘录的分发不受限制。

2. 介绍

本RFC介绍了域名风格的名称、其在互联网邮件和主机地址支持中的应用，以及用于实现域名设施的协议和服务器。

2.1. 域名的历史

开发域名系统的动力来自于互联网的增长：

   - 主机名到地址的映射由网络信息中心（NIC）在一个名为 HOSTS.TXT 的文件中维护，所有主机都通过FTP获取该文件 [RFC-952, RFC-953]。通过这种方式分发新版本所消耗的总网络带宽与网络中主机的平方成正比，即使使用多级FTP，NIC主机的传出FTP负载也相当可观。主机数量的爆炸性增长预示着未来不容乐观。

   - 网络群体的特征也在发生变化。构成原始ARPANET的分时主机正在被工作站的本地网络所取代。本地组织正在管理自己的名称和地址，但必须等待NIC更改HOSTS.TXT才能使更改对整个互联网可见。组织也希望在名称空间上拥有一些本地结构。

   - 互联网上的应用变得越来越复杂，从而产生了对通用名称服务的需求。

其结果是产生了一些关于名称空间及其管理的想法[IEN-116, RFC-799, RFC-819, RFC-830]。这些提案各不相同，但一个共同点是分层名称空间的想法，其层次结构大致对应于组织结构，并且名称使用"。"作为标记层次结构级别之间边界的字符。一种使用分布式数据库和通用资源的设计在[RFC-882, RFC-883]中有所描述。基于多个实现的经验，该系统演变成了本备忘录中描述的方案。

术语"域"或"域名"在许多上下文中被使用，超出了这里描述的DNS。很多时候，术语域名被用来指代一个由点表示结构但与DNS无关的名称。这在邮件寻址中尤其如此[Quarterman 86]。

2.2. DNS设计目标

DNS的设计目标影响了其结构。它们是：

   - 主要目标是一个一致的名称空间，将用于引用资源。为了避免由临时编码引起的问题，名称不应被要求包含网络标识符、地址、路由或类似信息作为名称的一部分。

   - 数据库的庞大规模和更新频率表明，它必须以分布式方式进行维护，并通过本地缓存来提高性能。试图收集整个数据库的一致副本的方法将变得越来越昂贵和困难，因此应予以避免。同样的原则也适用于名称空间的结构，特别是创建和删除名称的机制；这些也应该是分布式的。

   - 在获取数据的成本、更新速度和缓存准确性之间存在权衡时，数据源应控制这种权衡。

   - 实现这样一个设施的成本决定了它必须具有普遍用途，而不局限于单个应用。我们应该能够使用名称来检索主机地址、邮箱数据以及其他尚未确定的信息。与名称相关的所有数据都用类型标记，查询可以限制为单一类型。

   - 因为我们希望名称空间在不同的网络和应用中都有用，所以我们提供了使用不同协议族或管理方式使用相同名称空间的能力。例如，主机地址格式在不同协议之间有所不同，尽管所有协议都有地址的概念。DNS用一个类别和类型来标记所有数据，这样我们就可以允许对地址类型的数据并行使用不同的格式。

   - 我们希望名称服务器事务独立于承载它们的通信系统。一些系统可能希望使用数据报进行查询和响应，并且仅为需要可靠性的事务（例如，数据库更新，长事务）建立虚拟电路；其他系统将完全使用虚拟电路。

   - 该系统应在各种主机能力范围内都有用。个人计算机和大型分时主机都应该能够使用该系统，尽管可能方式不同。

2.3. 使用假设

域名系统的组织源于对其用户社区的需求和使用模式的一些假设，并旨在避免通用数据库系统中发现的许多复杂问题。

这些假设是：

   - 总数据库的大小最初将与使用该系统的主机数量成正比，但最终会随着邮箱和其他信息被添加到域名系统中而增长到与这些主机上的用户数量成正比。

   - 系统中的大多数数据将非常缓慢地改变（例如，邮箱绑定，主机地址），但系统应该能够处理变化更快的子集（以秒或分钟为单位）。

   - 用于分配数据库责任的管理边界通常会对应于拥有一个或多个主机的组织。每个对特定域集负责的组织将提供冗余的名称服务器，无论是在组织自己的主机上还是在组织安排使用的其他主机上。

   - 域名系统的客户端应该能够在接受对"受信任"集之外的名称服务器的引荐之前，识别他们更愿意使用的受信任的名称服务器。

   - 信息的访问比即时更新或一致性保证更为关键。因此，更新过程允许更新通过域名系统的用户逐渐渗透出去，而不是保证所有副本都同时更新。当由于网络或主机故障而无法进行更新时，通常的做法是相信旧信息，同时继续努力更新它。通用模型是副本随刷新超时一起分发。分发者设置超时值，分发的接收者负责执行刷新。在特殊情况下，可以指定非常短的时间间隔，或者所有者可以禁止副本。

   - 在任何具有分布式数据库的系统中，特定的名称服务器可能会收到一个只能由其他某个服务器回答的查询。处理这个问题的两种通用方法是"递归"，即第一个服务器为客户端在另一个服务器上追查查询，以及"迭代"，即服务器将客户端引荐到另一个服务器，让客户端自己追查查询。两种方法各有优缺点，但迭代方法更适用于数据报风格的访问。域名系统要求实现迭代方法，但允许递归方法作为选项。

域名系统假定所有数据都源于分布在使用域名系统的主机中的主文件。这些主文件由本地系统管理员更新。主文件是文本文件，由本地名称服务器读取，因此通过名称服务器对域名系统的用户可用。用户程序通过称为解析器的标准程序访问名称服务器。

主文件的标准格式允许它们在主机之间交换（通过FTP、邮件或某些其他机制）；当一个组织想要一个域但不想支持名称服务器时，此功能很有用。该组织可以使用文本编辑器在本地维护主文件，将它们传输到运行名称服务器的外部主机，然后与该名称服务器的系统管理员安排加载这些文件。

每个主机的名称服务器和解析器都由本地系统管理员配置[RFC-1033]。对于名称服务器，此配置数据包括本地主文件的标识以及关于从外部服务器加载哪些非本地主文件的指令。名称服务器使用主文件或副本来加载其区域。对于解析器，配置数据标识了应作为主要信息源的名称服务器。

域名系统定义了访问数据和引荐到其他名称服务器的程序。域名系统还定义了缓存检索到的数据和定期刷新由系统管理员定义的数据的程序。

系统管理员提供：

   - 区域边界的定义。

   - 数据的主文件。

   - 对主文件的更新。

   - 所需刷新策略的声明。

域名系统提供：

   - 资源数据的标准格式。

   - 查询数据库的标准方法。

   - 名称服务器从外部名称服务器刷新本地数据的标准方法。

2.4. DNS的元素

DNS有三个主要组成部分：

   - 域名空间和资源记录，它们是树状结构名称空间和与名称关联的数据的规范。从概念上讲，域名空间树的每个节点和叶子都命名一组信息，查询操作是尝试从特定集合中提取特定类型的信息。查询命名了感兴趣的域名并描述了所需的资源信息类型。例如，互联网使用其一些域名来标识主机；对地址资源的查询返回互联网主机地址。

   - 名称服务器是持有构成域树结构和集合信息的服务器程序。名称服务器可以缓存关于域树任何部分的结构或集合信息，但通常情况下，特定的名称服务器拥有关于域空间子集的完整信息，以及指向其他名称服务器的指针，这些指针可用于引导至域树任何部分的信息。名称服务器知道它们拥有完整信息的域树部分；一个名称服务器被称为是这些名称空间部分的权威机构。权威信息被组织成称为区域的单元，这些区域可以自动分发到为区域中的数据提供冗余服务的名称服务器。

   - 解析器是响应客户端请求从名称服务器提取信息的程序。解析器必须能够访问至少一个名称服务器，并使用该名称服务器的信息直接回答查询，或使用引荐到其他名称服务器来追查查询。解析器通常是一个可由用户程序直接访问的系统例程；因此解析器和用户程序之间不需要协议。

这三个组件大致对应于域名系统的三个层次或视图：

   - 从用户的角度来看，域名系统是通过对本地解析器的简单过程或操作系统调用来访问的。域名空间由单个树组成，用户可以请求树的任何部分的信息。

   - 从解析器的角度来看，域名系统由未知数量的名称服务器组成。每个名称服务器都有一或多个整个域树数据的片段，但解析器将这些数据库中的每一个都视为基本上是静态的。

   - 从名称服务器的角度来看，域名系统由称为区域的独立本地信息集组成。名称服务器拥有某些区域的本地副本。名称服务器必须定期从本地文件或外部名称服务器中的主副本刷新其区域。名称服务器必须并发处理来自解析器的查询。

为了性能，实现可能会耦合这些功能。例如，与名称服务器在同一台机器上的解析器可能会共享一个数据库，该数据库由名称服务器管理的区域和解析器管理的缓存组成。

3. 域名空间和资源记录

3.1. 名称空间规范和术语

域名空间是一个树状结构。树上的每个节点和叶子对应一个资源集（可能为空）。域名系统对内部节点和叶子的使用不作区分，本备忘录使用术语"节点"来指代两者。

每个节点都有一个标签，其长度为零到63个八位字节。兄弟节点不能有相同的标签，尽管相同的标签可以用于非兄弟节点。一个标签是保留的，即用于根的空（即零长度）标签。

节点的域名是从该节点到树根路径上的标签列表。按照惯例，构成域名的标签是从左到右打印或读取的，从最具体（最低，离根最远）到最不具体（最高，离根最近）。

在内部，处理域名的程序应将它们表示为标签序列，其中每个标签是一个长度八位字节后跟一个八位字节字符串。因为所有域名都以根结束，根的标签是一个空字符串，所以这些内部表示可以使用零长度字节来终止域名。

按照惯例，域名可以以任意大小写形式存储，但对于所有当前的域功能，域名比较都是以不区分大小写的方式进行的，假定使用ASCII字符集，并且高位为零。这意味着您可以自由创建一个标签为"A"的节点或一个标签为"a"的节点，但不能两者都是兄弟节点；您可以使用"a"或"A"来引用任何一个。当您收到一个域名或标签时，您应该保留其大小写。这个选择的理由是，我们将来可能需要为新服务添加完整的二进制域名；现有服务不会改变。

当用户需要输入域名时，省略每个标签的长度，并用点（"."）分隔标签。由于一个完整的域名以根标签结尾，这导致打印形式以点结尾。我们使用此属性来区分：

   - 表示完整域名的字符串（通常称为"绝对"名称）。例如，"poneria.ISI.EDU."

   - 表示不完整域名的起始标签的字符串，应由本地软件使用本地域的知识来补全（通常称为"相对"名称）。例如，在ISI.EDU域中使用的"poneria"。

相对名称要么是相对于一个众所周知的起点，要么是相对于用作搜索列表的域列表。相对名称主要出现在用户界面，其解释因实现而异，以及在主文件中，它们是相对于单个起点域名。最常见的解释使用根"."作为单个起点或作为搜索列表的成员之一，因此多标签的相对名称通常是省略了尾随点以节省输入的名称。

为简化实现，表示域名的总八位字节数（即所有标签八位字节和标签长度的总和）限制为255。

一个域由一个域名标识，并包含在该域名指定或之下的那部分域名空间。如果一个域包含在另一个域内，则它是该域的子域。这种关系可以通过查看子域的名称是否以包含域的名称结尾来测试。例如，A.B.C.D是B.C.D、C.D、D和" "的子域。

3.2. 行政使用指南

作为一项政策，DNS技术规范不强制要求特定的树结构或选择标签的规则；其目标是尽可能通用，以便可用于构建任意应用。特别是，该系统的设计使得名称空间不必按照网络边界、名称服务器等方式组织。这样做的理由不是名称空间不应有隐含的语义，而是应将隐含语义的选择开放，以用于手头的问题，并且树的不同部分可以有不同的隐含语义。例如，IN-ADDR.ARPA域是按网络和主机地址组织和分发的，因为其作用是从网络或主机号转换为名称；NetBIOS域[RFC-1001, RFC-1002]是扁平的，因为这适合该应用。

然而，有一些指南适用于用于主机、邮箱等的名称空间的"正常"部分，这将使名称空间更统一，为增长提供保障，并在软件从旧的主机表转换时最小化问题。关于树顶层的政治决策源于RFC-920。当前顶层的策略在[RFC-1032]中讨论。MILNET转换问题在[RFC-1031]中涵盖。

最终将被分成多个区域的较低级域应在域的顶部提供分支，以便最终的分解可以在不重命名的情况下完成。使用特殊字符、前导数字等的节点标签可能会破坏依赖于更严格选择的旧软件。

3.3. 技术使用指南

在DNS可用于保存某种对象的命名信息之前，必须满足两个需求：

   - 在对象名称和域名之间进行映射的约定。这描述了如何访问关于对象的信息。

   - 用于描述对象的RR类型和数据格式。

这些规则可以非常简单，也可以相当复杂。设计者通常必须考虑现有格式并为现有用法规划向上兼容性。可能需要多个映射或多级映射。

对于主机，映射取决于主机名的现有语法，该语法是域名通常文本表示的子集，以及用于描述主机地址等的RR格式。因为我们需要一个从地址到主机名的可靠反向映射，所以也定义了地址到IN-ADDR.ARPA域的特殊映射。

对于邮箱，映射稍微复杂一些。通常的邮件地址 <local-part>@<mail-domain> 通过将 <local-part> 转换为单个标签（不管它包含的点），使用域名的通常文本格式（点表示标签中断）将 <mail-domain> 转换为域名，并将两者连接起来形成单个域名来映射成域名。因此，邮箱 HOSTMASTER@SRI-NIC.ARPA 被表示为域名 HOSTMASTER.SRI-NIC.ARPA。要理解这种设计背后的原因，还必须考虑邮件交换的方案[RFC-974]。

典型用户不关心定义这些规则，但应理解它们通常是希望与旧用法向上兼容、不同对象定义之间的交互以及定义规则时不可避免地增加新功能的冲动之间无数妥协的结果。DNS用于支持某个对象的方式通常比DNS固有的限制更关键。

3.4. 示例名称空间

下图显示了当前域名空间的一部分，并在本RFC的许多示例中使用。请注意，该树是实际名称空间的非常小的子集。

                                   |
                                   |
             +---------------------+------------------+
             |                     |                  |
            MIL                   EDU                ARPA
             |                     |                  |
             |                     |                  |
       +-----+-----+               |     +------+-----+-----+
       |     |     |               |     |      |           |
      BRL  NOSC  DARPA             |  IN-ADDR  SRI-NIC     ACC
                                   |
       +--------+------------------+---------------+--------+
       |        |                  |               |        |
      UCI      MIT                 |              UDEL     YALE
                |                 ISI
                |                  |
            +---+---+              |
            |       |              |
           LCS  ACHILLES  +--+-----+-----+--------+
            |             |  |     |     |        |
            XX            A  C   VAXA  VENERA Mockapetris

在此示例中，根域有三个直接子域：MIL、EDU和ARPA。LCS.MIT.EDU域有一个直接子域名为XX.LCS.MIT.EDU。所有叶子也都是域。

3.5. 首选名称语法

DNS规范试图在构建域名的规则上尽可能通用。其思想是任何现有对象的名称都可以以最小的更改表示为域名。然而，在为对象分配域名时，谨慎的用户将选择一个既满足域系统规则又满足对象任何现有规则的名称，无论这些规则是已发布的还是由现有程序隐含的。

例如，在命名邮件域时，用户应同时满足本备忘录和RFC-822中的规则。在创建新主机名时，应遵循HOSTS.TXT的旧规则。这可以避免旧软件转换为使用域名时出现问题。

以下语法将减少许多使用域名的应用程序（例如，邮件，TELNET）的问题。

<domain> ::= <subdomain> | " "

<subdomain> ::= <label> | <subdomain> "." <label>

<label> ::= <letter> [ [ <ldh-str> ] <let-dig> ]

<ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str>

<let-dig-hyp> ::= <let-dig> | "-"

<let-dig> ::= <letter> | <digit>

<letter> ::= 52个大写字母A到Z和小写字母a到z中的任何一个

<digit> ::= 十个数字0到9中的任何一个

请注意，虽然域名中允许使用大写和小写字母，但大小写没有意义。也就是说，两个拼写相同但大小写不同的名称将被视为相同。

标签必须遵循ARPANET主机名的规则。它们必须以字母开头，以字母或数字结尾，并且内部字符只能是字母、数字和连字符。长度也有一些限制。标签必须是63个字符或更少。

例如，以下字符串标识了互联网中的主机：

A.ISI.EDU  XX.LCS.MIT.EDU  SRI-NIC.ARPA

3.6. 资源记录

域名标识一个节点。每个节点都有一组资源信息，该集合可能为空。与特定名称关联的资源信息集由单独的资源记录（RR）组成。集合中RR的顺序不重要，名称服务器、解析器或DNS的其他部分不必保留该顺序。

当我们谈论一个特定的RR时，我们假定它具有以下内容：

owner           RR所在的域名。

type            一个编码的16位值，指定此资源记录中资源的类型。类型指抽象资源。

                本备忘录使用以下类型：

                A               主机地址

                CNAME           标识别名的规范名称

                HINFO           标识主机使用的CPU和操作系统

                MX              标识域的邮件交换器。详情请见[RFC-974]。

                NS
                域的权威名称服务器

                PTR
                指向域名空间另一部分的指针

                SOA
                标识权威区域的开始

class           一个编码的16位值，标识协议族或协议实例。

                本备忘
                录使用以下类别：

                IN              互联网系统

                CH              Chaos系统

TTL             RR的生存时间。该字段是一个32位整数，单位为秒，主要由解析器在缓存RR时使用。TTL描述了RR在被丢弃之前可以被缓存多长时间。

RDATA           描述资源的类型和有时是类别相关的数据：

                A               对于IN类，一个32位IP地址

                                对于CH类，一个域名后跟一个16位八进制Chaos地址。

                CNAME           一个域名。

                MX              一个16位偏好值（值越低越好），后跟一个愿意作为所有者域的邮件交换器的主机名。

                NS              一个主机名。

                PTR             一个域名。

                SOA             几个字段。

owner名称通常是隐式的，而不是构成RR的组成部分。例如，许多名称服务器在内部分别为名称空间形成树或哈希结构，并将RR链接到节点上。剩余的RR部分是固定的头部（type、class、TTL），对所有RR都一致，以及一个可变部分（RDATA），以适应所描述的资源的需求。

TTL字段的含义是RR可以被缓存在缓存中的时间限制。此限制不适用于区域中的权威数据；它也会超时，但是由区域的刷新策略决定。TTL由数据来源区域的管理员分配。虽然短TTL可用于最小化缓存，零TTL禁止缓存，但互联网性能的现实表明，对于典型主机，这些时间应以天为单位。如果可以预见到更改，可以在更改前减少TTL以最小化更改期间的不一致，然后在更改后将其增加回其先前的值。

RRs的RDATA部分中的数据以二进制字符串和域名的组合形式传输。域名经常被用作DNS中其他数据的"指针"。

3.6.1. RR的文本表示

RR在DNS协议的数据包中以二进制形式表示，并且在存储在名称服务器或解析器中时通常以高度编码的形式表示。在本备忘录中，我们采用类似于主文件中使用的样式来显示RR的内容。在这种格式中，大多数RR都显示在单行上，尽管可以使用括号实现续行。

行的开头给出RR的所有者。如果一行以空白开头，则假定所有者与前一个RR的所有者相同。为了可读性，通常会包含空行。

在所有者之后，我们列出RR的TTL、类型和类别。类别和类型使用上面定义的助记符，TTL是类型字段之前的整数。为了避免解析中的歧义，类型和类别助记符是不相交的，TTL是整数，并且类型助记符总是在最后。为了清晰起见，示例中通常省略IN类别和TTL值。

RR的资源数据或RDATA部分是使用对数据的典型表示的知识给出的。

例如，我们可能会将消息中携带的RR显示为：

    ISI.EDU.        MX      10 VENERA.ISI.EDU.
                    MX      10 VAXA.ISI.EDU.
    VENERA.ISI.EDU. A       128.9.0.32
                    A       10.1.0.52
    VAXA.ISI.EDU.   A       10.2.0.27
                    A       128.9.0.33

MX RR的RDATA部分由一个16位数字后跟一个域名组成。地址RR使用标准的IP地址格式来包含一个32位互联网地址。

此示例显示了六个RR，每个三个域名处有两个RR。

同样，我们可能会看到：

    XX.LCS.MIT.EDU. IN      A       10.0.0.44
                    CH      A       MIT.EDU. 2420

此示例显示了XX.LCS.MIT.EDU的两个地址，每个地址都属于不同的类别。

3.6.2. 别名和规范名称

在现有系统中，主机和其他资源通常有多个名称标识同一资源。例如，名称C.ISI.EDU和USC-ISIC.ARPA都标识同一主机。同样，在邮箱的情况下，许多组织提供许多实际上指向同一邮箱的名称；例如Mockapetris@C.ISI.EDU、Mockapetris@B.ISI.EDU和PVM@ISI.EDU都指向同一个邮箱（尽管这背后的机制有些复杂）。

这些系统中的大多数都有一个概念，即等效名称集中的一个是规范名称或主名称，所有其他名称都是别名。

域系统使用规范名称（CNAME）RR提供这样的功能。CNAME RR将其所有者名称标识为别名，并在RR的RDATA部分中指定相应的规范名称。如果一个节点上存在CNAME RR，则不应存在其他数据；这确保了规范名称及其别名的数据不会不同。此规则还确保了可以不用向权威服务器检查其他RR类型而使用缓存的CNAME。

CNAME RR在DNS软件中会引起特殊操作。当名称服务器未能在与域名关联的资源集中找到所需的RR时，它会检查该资源集是否由具有匹配类别的CNAME记录组成。如果是，名称服务器将在响应中包含CNAME记录，并在CNAME记录的数据字段中指定的域名处重新开始查询。此规则的一个例外是，匹配CNAME类型的查询不会重新启动。

例如，假设一个名称服务器正在处理一个对USC-ISIC.ARPA的类型A信息的查询，并有以下资源记录：

    USC-ISIC.ARPA   IN      CNAME   C.ISI.EDU

    C.ISI.EDU       IN      A       10.0.0.52

这两个RR都将在对类型A查询的响应中返回，而类型CNAME或*查询应仅返回CNAME。

指向另一个名称的RR中的域名应始终指向主名称而不是别名。这避免了访问信息时的额外间接。例如，上述主机的地址到名称RR应为：

    52.0.0.10.IN-ADDR.ARPA  IN      PTR     C.ISI.EDU

而不是指向USC-ISIC.ARPA。当然，根据鲁棒性原则，域软件在遇到CNAME链或循环时不应失败；CNAME链应被跟随，CNAME循环应被标记为错误。

3.7. 查询

查询是可以发送到名称服务器以引发响应的消息。在互联网中，查询通过UDP数据报或TCP连接传输。名称服务器的响应要么回答查询中提出的问题，要么将请求者引荐到另一组名称服务器，要么指示某些错误条件。

通常，用户不直接生成查询，而是向解析器发出请求，解析器依次向名称服务器发送一个或多个查询，并处理可能导致的错误条件和引荐。当然，查询中可以提出的问题确实塑造了解析器可以提供的服务类型。

DNS查询和响应以标准消息格式传输。消息格式有一个包含多个始终存在的固定字段的报头，以及四个携带查询参数和RR的部分。

报头中最重要的字段是一个四位字段，称为操作码，用于区分不同的查询。在可能的16个值中，一个（标准查询）是官方协议的一部分，两个（反向查询和状态查询）是选项，一个（补全）已过时，其余未分配。

四个部分是：

Question        携带查询名称和其他查询参数。

Answer          携带直接回答查询的RR。

Authority       携带描述其他权威服务器的RR。可以可选地携带答案部分中权威数据的SOA RR。

Additional      携带可能有助于使用其他部分中RR的RR。

请注意，这些部分的内容（但不是格式）随报头操作码而变化。

3.7.1. 标准查询

标准查询指定目标域名（QNAME）、查询类型（QTYPE）和查询类别（QCLASS），并请求匹配的RR。这类查询占DNS查询的绝大多数，因此我们使用术语"查询"来表示标准查询，除非另有说明。QTYPE和QCLASS字段各为16位长，是已定义类型和类别的超集。

QTYPE字段可以包含：

<any type>      仅匹配该类型。(例如, A, PTR)。

AXFR            特殊的区域传送QTYPE。

MAILB           匹配所有与邮箱相关的RR (例如 MB 和 MG)。

*               匹配所有RR类型。

QCLASS字段可以包含：

<any class>     仅匹配该类别 (例如, IN, CH)。

*               匹配所有RR类别。

使用查询域名、QTYPE和QCLASS，名称服务器查找匹配的RR。除了相关记录，名称服务器可能返回指向拥有所需信息的名称服务器的RR，或预期在解释相关RR时有用的RR。例如，一个没有请求信息的名称服务器可能知道一个有的名称服务器；一个在相关RR中返回域名的名称服务器也可能返回将该域名绑定到地址的RR。

例如，一个尝试向Mockapetris@ISI.EDU发送邮件的邮件程序可能会向解析器询问ISI.EDU的邮件信息，从而导致一个QNAME=ISI.EDU, QTYPE=MX, QCLASS=IN的查询。响应的答案部分将是：

    ISI.EDU.        MX      10 VENERA.ISI.EDU.
                    MX      10 VAXA.ISI.EDU.

而附加部分可能是：

    VAXA.ISI.EDU.   A       10.2.0.27
                    A       128.9.0.33
    VENERA.ISI.EDU. A       10.1.0.52
                    A       128.9.0.32

因为服务器假定如果请求者想要邮件交换信息，它很可能很快就会想要邮件交换的地址。

请注意，QCLASS=* 结构需要关于权威的特殊解释。由于特定的名称服务器可能不知道域系统中可用的所有类别，它永远无法知道它是否对所有类别都是权威的。因此，对QCLASS=* 查询的响应永远不可能是权威的。

3.7.2. 反向查询 (可选)

名称服务器也可以支持反向查询，将特定资源映射到一个或多个拥有该资源的域名。例如，虽然标准查询可能将一个域名映射到一个SOA RR，但相应的反向查询可能将该SOA RR映射回该域名。

在名称服务器中实现此服务是可选的，但所有名称服务器必须至少能够理解反向查询消息并返回一个未实现错误响应。

域名系统不能保证反向查询的完整性或唯一性，因为域名系统是按域名而不是按主机地址或任何其他资源类型组织的。反向查询主要用于调试和数据库维护活动。

反向查询可能不会返回正确的TTL，并且不会指示所识别的RR是一组中的一个（例如，一个拥有多个地址的主机的一个地址）的情况。因此，反向查询中返回的RR永远不应被缓存。

反向查询不是将主机地址映射到主机名的可接受方法；请改用IN-ADDR.ARPA域。

关于反向查询的详细讨论包含在[RFC-1035]中。

3.8. 状态查询 (实验性)

待定义。

3.9. 补全查询 (已过时)

RFC 882和883中描述的可选补全服务已被删除。重新设计的服务将来可能会提供，或者操作码可能会被回收用于其他用途。

4. 名称服务器

4.1. 介绍

名称服务器是构成域数据库的信息存储库。数据库被划分为称为区域的部分，这些部分分布在名称服务器之间。虽然名称服务器可以有几个可选功能和数据源，但名称服务器的基本任务是使用其区域中的数据回答查询。通过设计，名称服务器可以以简单的方式回答查询；响应总是可以仅使用本地数据生成，并且要么包含问题的答案，要么引荐到其他"更接近"所需信息的名称服务器。

一个给定的区域将可以从多个名称服务器获得，以确保其在主机或通信链路故障时的可用性。通过行政命令，我们要求每个区域至少在两个服务器上可用，并且许多区域具有比这更多的冗余。

一个给定的名称服务器通常会支持一个或多个区域，但这只给了它关于域树一小部分的权威信息。它也可能有一些关于树其他部分的缓存的非权威数据。名称服务器会标记其对查询的响应，以便请求者可以判断响应是来自权威数据还是非权威数据。

4.2. 数据库如何划分为区域

域数据库以两种方式划分：按类别，以及在节点之间对名称空间进行的"切割"。

类别划分很简单。任何类别的数据都与所有其他类别分开组织、授权和维护。由于按照惯例，所有类别的名称空间是相同的，因此可以将不同的类别视为并行名称空间树的数组。请注意，附加到节点的数据对于这些不同的并行类别是不同的。创建新类别的最常见原因是需要为现有类型提供新的数据格式，或者希望对现有名称空间进行单独管理。

在一个类别内，可以在任何两个相邻节点之间对名称空间进行"切割"。在所有切割完成后，每组连接的名称空间都是一个独立的区域。该区域被认为是该连接区域中所有名称的权威。请注意，对于不同的类别，名称空间中的"切割"可能在不同的位置，名称服务器可能不同，等等。

这些规则意味着每个区域至少有一个节点，因此有一个域名，它对其具有权威性，并且特定区域中的所有节点都是连接的。鉴于树状结构，每个区域都有一个最高的节点，比该区域中的任何其他节点都更靠近根。该节点的名称通常用于标识该区域。

将名称空间划分为每个域名都在一个单独的区域中，或者所有节点都在一个区域中是可能的，尽管不是特别有用。相反，数据库在特定组织希望接管子树控制权的点进行分区。一旦一个组织控制了自己的区域，它就可以单方面更改区域中的数据，生长连接到该区域的新树部分，删除现有节点，或在其区域下授权新的子区域。

如果组织有子结构，它可能希望进行进一步的内部分区以实现名称空间控制的嵌套授权。在某些情况下，进行这种划分纯粹是为了使数据库维护更方便。

4.2.1. 技术考虑

描述一个区域的数据有四个主要部分：

   - 区域内所有节点的权威数据。

   - 定义区域顶层节点的数据（可被视为权威数据的一部分）。

   - 描述已授权子区域的数据，即区域底部的切割。

   - 允许访问子区域名称服务器的数据（有时称为"胶水"数据）。

所有这些数据都以RR的形式表示，因此一个区域可以完全用一组RR来描述。整个区域可以通过传输RR在名称服务器之间传输，RR可以携带在一系列消息中，也可以通过FTP传输一个文本表示的主文件。

一个区域的权威数据就是从区域的顶层节点到叶节点或区域底部切割上方的节点的所有节点上附加的所有RR。

尽管在逻辑上是权威数据的一部分，但描述区域顶层节点的RR对区域的管理特别重要。这些RR有两种类型：名称服务器RR，每条RR列出一个区域的所有服务器，以及一条描述区域管理参数的SOA RR。

描述区域底部切割的RR是命名子区域服务器的NS RR。由于切割是在节点之间进行的，这些RR不属于区域的权威数据，并且应与子区域顶层节点中的相应RR完全相同。由于名称服务器总是与区域边界相关联，NS RR仅在作为某个区域顶层节点的节点上找到。在构成区域的数据中，NS RR在区域的顶层节点（并且是权威的）和区域底部的切割处（它们不是权威的）找到，但绝不会在两者之间。

区域结构的目标之一是任何区域都拥有与任何子区域的名称服务器建立通信所需的所有数据。也就是说，父区域拥有访问其子区域服务器所需的所有信息。命名子区域服务器的NS RR通常不足以完成此任务，因为它们命名了服务器，但没有给出它们的地址。特别是，如果名称服务器的名称本身就在子区域中，我们可能会面临这样的情况：NS RR告诉我们，为了学习名称服务器的地址，我们应该使用我们希望学习的地址来联系该服务器。为了解决这个问题，一个区域包含"胶水"RR，这些RR不属于权威数据，是服务器的地址RR。这些RR仅在名称服务器的名称"低于"切割时才是必需的，并且仅作为引荐响应的一部分使用。

4.2.2. 行政考虑

当某个组织想要控制自己的域时，第一步是确定合适的父区域，并获得父区域所有者的同意，以授权控制。虽然在树的哪个位置可以这样做没有特定的技术限制，但在[RFC-1032]中讨论了一些行政分组，这些分组处理顶层组织，而中层区域可以自由创建自己的规则。例如，一所大学可能选择使用单个区域，而另一所大学可能选择按致力于各个系或学院的子区域进行组织。[RFC-1033]列出了可用的DNS软件并讨论了管理程序。

一旦为新的子区域选择了合适的名称，新所有者应被要求展示冗余的名称服务器支持。请注意，没有要求区域的服务器必须驻留在该域中具有名称的主机中。在许多情况下，如果一个区域的服务器广泛分布而不是位于由管理该区域的同一组织控制的物理设施内，那么该区域将更容易被整个互联网访问。例如，在当前的DNS中，英国（UK）域的一个名称服务器位于美国。这使得美国主机可以在不使用有限的跨大西洋带宽的情况下获取英国数据。

作为最后的安装步骤，应将使授权生效所必需的授权NS RR和胶水RR添加到父区域。两个区域的管理员应确保标记切割两侧的NS和胶水RR是一致的，并保持如此。

4.3. 名称服务器内部机制

4.3.1. 查询与响应

名称服务器的主要活动是回答标准查询。查询及其响应都以标准消息格式传输，该格式在[RFC-1035]中描述。查询包含一个QTYPE、QCLASS和QNAME，它们描述了所需信息的类型和类别以及感兴趣的名称。

名称服务器回答查询的方式取决于它是否在递归模式下运行：

   - 服务器最简单的模式是非递归模式，因为它仅使用本地信息就能回答查询：响应包含错误、答案或对某个"更接近"答案的其他服务器的引荐。所有名称服务器都必须实现非递归查询。

   - 客户端最简单的模式是递归模式，因为在此模式下，名称服务器扮演解析器的角色，返回错误或答案，但从不返回引荐。此服务在名称服务器中是可选的，名称服务器也可以选择限制哪些客户端可以使用递归模式。

递归服务在以下几种情况下很有帮助：

   - 一个相对简单的请求者，除了直接回答问题外，没有能力使用任何其他东西。

   - 一个需要跨越协议或其他边界的请求，可以发送到一个可以充当中介的服务器。

   - 一个我们希望集中缓存而不是为每个客户端都有单独缓存的网络。

如果请求者能够处理引荐并对有助于未来请求的信息感兴趣，则非递归服务是合适的。

递归模式的使用仅限于客户端和名称服务器都同意使用它的情况。该协议是通过在查询和响应消息中使用两个位来协商的：

   - 递归可用（RA）位由名称服务器在所有响应中设置或清除。如果名称服务器愿意为客户端提供递归服务，则该位为真，无论客户端是否请求递归服务。也就是说，RA表示可用性而不是使用。

   - 查询包含一个称为递归期望（RD）的位。该位指定请求者是否希望为此查询提供递归服务。客户端可以向任何名称服务器请求递归服务，尽管它们应该只依赖于从先前发送了RA的服务器，或者通过私下协议或DNS协议之外的某些其他方式同意提供服务的服务器获得服务。

当一个设置了RD的查询到达一个愿意提供递归服务的服务器时，就会发生递归模式；客户端可以通过检查响应中RA和RD都已设置来验证是否使用了递归模式。请注意，除非通过RD请求，否则名称服务器不应执行递归服务，因为这会干扰名称服务器及其数据库的故障排除。

如果请求了递归服务并且可用，则对查询的递归响应将是以下之一：

   - 查询的答案，可能前面有一个或多个CNAME RR，指定在找到答案的过程中遇到的别名。

   - 一个名称错误，指示该名称不存在。这可能包括CNAME RR，指示原始查询名称是不存在名称的别名。

   - 一个临时错误指示。

如果未请求递归服务或递归服务不可用，则非递归响应将是以下之一：

   - 一个权威名称错误，指示该名称不存在。

   - 一个临时错误指示。

   - 以下的某种组合：

     回答问题的RR，以及指示数据是来自区域还是缓存的指示。

     对名称服务器的引荐，这些服务器的区域比发送回复的服务器更接近该名称的祖先。

   - 名称服务器认为对请求者有用的RR。

4.3.2. 算法

名称服务器使用的实际算法将取决于本地操作系统和用于存储RR的数据结构。以下算法假定RR被组织在几个树结构中，每个区域一个，缓存一个：

   1. 根据名称服务器是否愿意提供递归服务，在响应中设置或清除递归可用的值。如果递归服务可用并且通过查询中的RD位请求，则转到步骤5，否则转到步骤2。

   2. 在可用区域中搜索最接近QNAME祖先的区域。如果找到这样的区域，则转到步骤3，否则转到步骤4。

   3. 在区域中逐个标签地向下匹配。匹配过程可以通过几种方式终止：

         a. 如果整个QNAME都匹配，我们找到了节点。

            如果节点处的数据是CNAME，并且QTYPE与CNAME不匹配，则将CNAME RR复制到响应的答案部分，将QNAME更改为CNAME RR中的规范名称，然后返回到步骤1。

            否则，将所有与QTYPE匹配的RR复制到答案部分，然后转到步骤6。

         b. 如果匹配将我们带出权威数据，我们有一个引荐。这发生在我们遇到一个带有NS RR标记区域底部切割的节点时。

            将子区域的NS RR复制到回复的授权部分。将任何可用的地址放入附加部分，如果地址无法从权威数据或缓存中获得，则使用胶水RR。转到步骤4。

         c. 如果在某个标签处，匹配不可能（即，相应的标签不存在），则查看"*"标签是否存在。

            如果"*"标签不存在，检查我们正在查找的名称是查询中的原始QNAME还是我们因CNAME而跟随的名称。如果名称是原始名称，则在响应中设置权威名称错误并退出。否则直接退出。

            如果"*"标签确实存在，则将该节点的RR与QTYPE进行匹配。如果有任何匹配，将它们复制到答案部分，但将RR的所有者设置为QNAME，而不是带有"*"标签的节点。转到步骤6。

   4. 在缓存中向下开始匹配。如果在缓存中找到QNAME，则将其附加的所有与QTYPE匹配的RR复制到答案部分。如果没有来自权威数据的授权，则从缓存中寻找最佳授权，并将其放入授权部分。转到步骤6。

   5. 使用本地解析器或其算法的副本来回答查询（请参阅本备忘录的解析器部分）。将结果（包括任何中间CNAME）存储在响应的答案部分。

   6. 仅使用本地数据，尝试将可能有用的其他RR添加到查询的附加部分。退出。 